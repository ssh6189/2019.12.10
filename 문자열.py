문자열은 시퀀스 자료형

문자열과 메모리 공간
일반적으로 문자열을 저장하기 위해서는 영문자 한 글자당 1바이트의 메모리 공간을 사용한다,

다음과 같은 코드로 문자열이 저장된 공간의 크기를 확인할 수 있다.

컴퓨터공학자들은 이러한 문자를 처리하기 위해 이진수로 변환되는 표준규칙을 만들었다.
이를 인코딩이라고 한다.

1.컴퓨터는 문자를 직접 인식하지 못한다.
2.컴퓨터는 문자를 숫자로 변환하여 인식한다.
3.사람들은 문자를 숫자로 변환하기 위한 규칙을 만들었다.
4.일반적으로 이 규칙은 1개의 영문자를 1바이트, 즉, 2의 8승 정도의 공간에 저장할 수 있다.

기억만해두자
0 = 48
A = 65
a = 97

우리가 사용하는 모든 문자는 컴퓨터에 수로 저장되어있다.



문자열의 인덱싱

리스트처럼 글자 하나하나가 상대적인 주소를 가지는데, 이 주소를 사용해 할당된 값을 가져오는 인덱싱을 사용할 수 있다.

문자열의 슬라이싱
문자열의 주소값을 기반으로 문자열의 부분값을 지정한다.

문자열끼리 더하면 결합연산
곱하면 반복연산

문자열의 연산

다음과 같이 코드를 작성하면, 문자열과 정수형의 연산으로 인식하여 덧셈이 실행되지 않는다.



문자열의 연산
len() 문자열의 문자 개수 반환
upper() 문자로 변환
lower() 소문자로 변환
title() 각 단어의 앞글자만 대문자로 변환
capitalize() 첫 문자를 대문자로 변환
count('') '찾을 문자열'이 몇개 들어 있는지 개수 반환
find('') '찾을 문자열'의 인덱스를 앞에서부터 하나만 찾은 뒤 종료, 단어 입력시 첫글자의 인덱스 반한, 없으면 -1 반환
rfind('') '찾을 문자열'의 인덱스를 뒤에서부터 하나만 찾은 뒤 종료, 단어 입력시 첫글자의 인덱스 반한, 없으면 -1 반환
startswith('') 입력한 단어로 시작하는지 판단해서 맞으면 True, 아니면, False
endswith('') 입력한 단어로 끝나는지 판단해서 맞으면 True, 아니면, False
strip() 좌우공백삭제 
rstrip() 오른쪽공백 삭제
lstrip() 왼쪽공백 삭제
split() 구분자를 기준으로 문자열을 잘라 리스트에 저장
isdigit() 해당 문자열이 숫자인지를 True 또는 False로 반환
islower() 모든 문자가 소문자인지 판단해서 맞으면 True 틀리면, False로 반환
isupper() 모든 문자가 대문자인지 판단해서 맞으면 True 틀리면, False로 반


"", '' 출력법

'""'
"''"


두줄이상으로 작성시
"""내용"""
'''내용'''

s = """I'm Okay
       I'm happy
       see you
     """
